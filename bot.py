from telebot import TeleBot, types
from oauth2client.service_account import ServiceAccountCredentials
import gspread
import datetime
import time
import threading

# === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets ===
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("creds.json", scope)
client = gspread.authorize(creds)
spreadsheet = client.open("–õ–æ–≥–∏—Å—Ç–∏–∫–∞ - –¢–µ—Å—Ç–æ–≤–∞—è –¢–∞–±–ª–∏—Ü–∞")

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–∏—Å—Ç—ã
all_sheets = spreadsheet.worksheets()
sheet_tasks = None
sheet_status = None

for ws in all_sheets:
    header = ws.acell('A1').value
    if header == "–î–∞—Ç–∞":
        sheet_tasks = ws
    elif header == "–í–æ–¥–∏—Ç–µ–ª—å":
        sheet_status = ws

if not sheet_tasks or not sheet_status:
    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ª–∏—Å—Ç—ã. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –≤ A1 –Ω–∞ –æ–¥–Ω–æ–º –ª–∏—Å—Ç–µ '–î–∞—Ç–∞', –Ω–∞ –¥—Ä—É–≥–æ–º ‚Äî '–í–æ–¥–∏—Ç–µ–ª—å'.")

bot = TeleBot("8085053958:AAHhjYpYWWuCxiynpoeCxAoz0conVeE_17w")

users = {}
sent_tasks = {}
sent_additional_tasks = {}

@bot.message_handler(commands=['start'])
def start(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –∏–º—è:")
    bot.register_next_step_handler(message, register_name)

def register_name(message):
    chat_id = message.chat.id
    name = message.text.strip()
    users[chat_id] = {'name': name, 'waiting': True}
    names_list = sheet_status.col_values(1)
    if name not in names_list:
        sheet_status.append_row([name])
    sent_tasks[chat_id] = set()
    sent_additional_tasks[chat_id] = set()
    bot.send_message(chat_id, "–û–∂–∏–¥–∞–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è.")

def monitoring_loop():
    while True:
        try:
            for chat_id, data in users.items():
                if data.get('waiting'):
                    check_and_send_task(chat_id, data['name'])
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:", e)
        time.sleep(3)

def check_and_send_task(chat_id, name):
    today = datetime.datetime.now().strftime('%Y-%m-%d')
    tasks = sheet_tasks.get_all_records(head=2)
    for idx, row in enumerate(tasks, start=2):
        if (
           row['–î–∞—Ç–∞'] == today
           and row['–í–æ–¥–∏—Ç–µ–ª—å'] == name
           and not row['–°—Ç–∞—Ç—É—Å']
           and all(not row.get(col) for col in ['–ü—Ä–∏–Ω—è—Ç–∏–µ', '–ü—Ä–∏–Ω—è—Ç–∏–µ.1', '–ü—Ä–∏–Ω—è—Ç–∏–µ.2'])  # —Å—Ç–æ–ª–±—Ü—ã L, N, P
        ):

            task_id = idx
            if task_id not in sent_tasks.get(chat_id, set()):
                sent_tasks[chat_id].add(task_id)
                users[chat_id]['current_row'] = idx
                users[chat_id]['waiting'] = False
                text = (f"–ó–∞–¥–∞—á–∞: {row['–ó–∞–¥–∞—á–∞']}\n–ú–∞—à–∏–Ω–∞: {row['–ú–∞—à–∏–Ω–∞']}\n–í—Ä–µ–º—è –ø–æ –ø–ª–∞–Ω—É: {row['–í—Ä–µ–º—è (–ø–æ –ø–ª–∞–Ω—É)']}")
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                markup.add("‚úÖ –í–∑—è—Ç—å –∑–∞–¥–∞–Ω–∏–µ", "‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤–∑—è—Ç—å –∑–∞–¥–∞–Ω–∏–µ")
                bot.send_message(chat_id, text, reply_markup=markup)
            return

@bot.message_handler(func=lambda m: m.text in ["‚úÖ –í–∑—è—Ç—å –∑–∞–¥–∞–Ω–∏–µ", "‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤–∑—è—Ç—å –∑–∞–¥–∞–Ω–∏–µ"])
def process_task_choice(message):
    chat_id = message.chat.id
    row = users[chat_id]['current_row']
    if message.text == "‚úÖ –í–∑—è—Ç—å –∑–∞–¥–∞–Ω–∏–µ":
        now_time = (datetime.datetime.utcnow() + datetime.timedelta(hours=3)).strftime("%H:%M")
        sheet_tasks.update(f'F{row}:H{row}', [[now_time, '', "–í –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"]])
        bot.send_message(chat_id, "–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–¥–∞–Ω–∏–µ. –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω—É–∂–Ω–æ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ?")
        bot.register_next_step_handler(message, save_eta)
    elif message.text == "‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤–∑—è—Ç—å –∑–∞–¥–∞–Ω–∏–µ":
        bot.send_message(chat_id, "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞:")
        bot.register_next_step_handler(message, impossible_reason)

def save_eta(message):
    chat_id = message.chat.id
    row = users[chat_id]['current_row']
    eta = message.text.strip()
    sheet_tasks.update(f'G{row}', [[eta]])
    show_task_actions(chat_id)

def impossible_reason(message):
    chat_id = message.chat.id
    row = users[chat_id]['current_row']
    reason = message.text.strip()
    driver_name = users[chat_id]['name']
    timestamp = (datetime.datetime.utcnow() + datetime.timedelta(hours=3)).strftime("%H:%M")
    current_comment = sheet_tasks.cell(row, 9).value or ""
    new_comment = f"{current_comment}\n{driver_name} ({timestamp}): {reason}" if current_comment else f"{driver_name} ({timestamp}): {reason}"
    sheet_tasks.update_cell(row, 9, new_comment)
    sheet_tasks.update(f'B{row}', [[""]])
    bot.send_message(chat_id, "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –ó–∞–¥–∞–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫.")
    sent_tasks[chat_id] = set()
    users[chat_id]['waiting'] = True
    bot.send_message(chat_id, "–û–∂–∏–¥–∞–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è.")

def show_task_actions(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ", "‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å", "üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@bot.message_handler(func=lambda m: m.text in ["‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ", "‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å", "üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"])
def process_task_action(message):
    chat_id = message.chat.id
    row = users[chat_id]['current_row']
    name = users[chat_id]['name']
    if message.text == "‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ":
        now_time = (datetime.datetime.utcnow() + datetime.timedelta(hours=3)).strftime("%H:%M")
        sheet_tasks.update(f'J{row}', [[now_time]])
        sheet_tasks.update(f'H{row}', [["–í—ã–ø–æ–ª–Ω–µ–Ω–æ"]])
        bot.send_message(chat_id, "–ó–∞–¥–∞–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ.")
        bot.send_message(chat_id, "–û–∂–∏–¥–∞–π—Ç–µ –∑–∞–¥–∞–Ω–∏–µ.")
        users[chat_id]['waiting'] = True
        sent_tasks[chat_id] = set()
    elif message.text == "‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å":
        bot.send_message(chat_id, "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É:")
        bot.register_next_step_handler(message, fail_reason)
    elif message.text == "üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π":
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")
        bot.register_next_step_handler(message, add_comment)

def fail_reason(message):
    chat_id = message.chat.id
    row = users[chat_id]['current_row']
    reason = message.text.strip()
    driver_name = users[chat_id]['name']
    timestamp = (datetime.datetime.utcnow() + datetime.timedelta(hours=3)).strftime("%H:%M")
    current_comment = sheet_tasks.cell(row, 9).value or ""
    new_comment = f"{current_comment}\n{driver_name} ({timestamp}): {reason}" if current_comment else f"{driver_name} ({timestamp}): {reason}"
    sheet_tasks.update(f'B{row}:G{row}', [["", "", "", "", "", ""]])
    bot.send_message(chat_id, "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –ó–∞–¥–∞–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫.")
    sent_tasks[chat_id] = set()
    users[chat_id]['waiting'] = True
    bot.send_message(chat_id, "–û–∂–∏–¥–∞–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è.")

def add_comment(message):
    chat_id = message.chat.id
    row = users[chat_id]['current_row']
    comment = message.text.strip()
    driver_name = users[chat_id]['name']
    timestamp = (datetime.datetime.utcnow() + datetime.timedelta(hours=3)).strftime("%H:%M")
    current_comment = sheet_tasks.cell(row, 9).value or ""
    new_comment = f"{current_comment}\n{driver_name} ({timestamp}): {comment}" if current_comment else f"{driver_name} ({timestamp}): {comment}"
    sheet_tasks.update_cell(row, 9, new_comment)
    bot.send_message(chat_id, "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω.")
    show_task_actions(chat_id)

def process_reject_comment(message):
    chat_id = message.chat.id
    context = users[chat_id].get('reject_context')
    if not context:
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–∞–∑–∞.")
        return
    row = context['row']
    col = context['col']
    driver = context['driver']
    timestamp = (datetime.datetime.utcnow() + datetime.timedelta(hours=3)).strftime("%H:%M")
    reason = message.text.strip()
    value = f"{driver} ({timestamp}): {reason}"
    sheet_tasks.update_cell(row, col + 1, value)
    bot.send_message(chat_id, "–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
    del users[chat_id]['reject_context']
def reject_reason(message, row, col, driver):
    reason = message.text.strip()
    timestamp = (datetime.datetime.utcnow() + datetime.timedelta(hours=3)).strftime("%H:%M")
    sheet_tasks.update_cell(row, col + 1, f"{driver} ({timestamp}): {reason}")
    bot.send_message(message.chat.id, "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")

monitor_thread = threading.Thread(target=monitoring_loop, daemon=True)
monitor_thread.start()

monitor_additional_thread = threading.Thread(target=monitor_additional, daemon=True)
monitor_additional_thread.start()

from flask import Flask, request

app = Flask(__name__)

@app.route('/', methods=['POST'])
def webhook():
    json_str = request.get_data().decode('UTF-8')
    update = types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return '!', 200

@app.route('/', methods=['GET'])
def index():
    return "Bot is running!", 200

if __name__ == '__main__':
    bot.remove_webhook()
    time.sleep(1)
    bot.set_webhook(url='https://logistics-bot-nnxy.onrender.com')
    app.run(host="0.0.0.0", port=10000)def monitor_additional():
    while True:
        try:
            for chat_id, data in users.items():
                if not data.get('waiting') and 'current_row' in data:
                    row = data['current_row']
                    
                    if chat_id not in sent_additional_tasks:
                        sent_additional_tasks[chat_id] = set()

                    for col_idx, label in [(11, '–î–æ–ø. –∑–∞–¥–∞–Ω–∏–µ 1'), (13, '–î–æ–ø. –∑–∞–¥–∞–Ω–∏–µ 2'), (15, '–î–æ–ø. –∑–∞–¥–∞–Ω–∏–µ 3')]:
                        task = sheet_tasks.cell(row, col_idx).value
                        task_status = sheet_tasks.cell(row, col_idx + 1).value or ""
                        task_key = f"{row}_{col_idx}"

                        if task and not task_status and task_key not in sent_additional_tasks[chat_id]:
                            markup = types.InlineKeyboardMarkup()
                            markup.add(
                                types.InlineKeyboardButton(text="–ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{row}_{col_idx}"),
                                types.InlineKeyboardButton(text="–û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data=f"reject_{row}_{col_idx}")
                            )
                            bot.send_message(chat_id, f"{label}:\n{task}", reply_markup=markup)
                            sent_additional_tasks[chat_id].add(task_key)
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –¥–æ–ø. –∑–∞–¥–∞–Ω–∏–π:", e)
        time.sleep(10)

@bot.callback_query_handler(func=lambda call: call.data.startswith("accept_") or call.data.startswith("reject_"))
def handle_additional_task(call):
    chat_id = call.message.chat.id
    driver = users[chat_id]['name']
    parts = call.data.split('_')
    action, row, col = parts[0], int(parts[1]), int(parts[2])
    timestamp = (datetime.datetime.utcnow() + datetime.timedelta(hours=3)).strftime("%H:%M")

    if action == "accept":
        sheet_tasks.update_cell(row, col + 1, f"{driver} –ø—Ä–∏–Ω—è–ª –∑–∞–¥–∞–Ω–∏–µ –≤ {timestamp}")
        bot.answer_callback_query(call.id, text="–ó–∞–¥–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ")
        bot.edit_message_reply_markup(chat_id=chat_id, message_id=call.message.message_id, reply_markup=None)

    elif action == "reject":
        users[chat_id]['reject_context'] = {'row': row, 'col': col, 'driver': driver}
        bot.send_message(chat_id, "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞:")
        bot.register_next_step_handler(call.message, process_reject_comment)
        bot.answer_callback_query(call.id)
        bot.edit_message_reply_markup(chat_id=chat_id, message_id=call.message.message_id, reply_markup=None)

