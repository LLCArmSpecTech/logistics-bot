from telebot import TeleBot, types
from oauth2client.service_account import ServiceAccountCredentials
import gspread
import datetime
import time
import threading
ALLOWED_USERS = set()
INVITE_CODE = "AST_2024"  # –∫–æ–¥
valid_invite_codes = {
    "AST_2024": "–î–æ—Å—Ç—É–ø –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è"
}

# === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets ===
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("creds.json", scope)
client = gspread.authorize(creds)
spreadsheet = client.open("–õ–æ–≥–∏—Å—Ç–∏–∫–∞ - –¢–µ—Å—Ç–æ–≤–∞—è –¢–∞–±–ª–∏—Ü–∞")

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–∏—Å—Ç—ã
all_sheets = spreadsheet.worksheets()
sheet_tasks = None
sheet_status = None

for ws in all_sheets:
    header = ws.acell('A1').value
    if header == "–î–∞—Ç–∞":
        sheet_tasks = ws
    elif header == "–í–æ–¥–∏—Ç–µ–ª—å":
        sheet_status = ws

if not sheet_tasks or not sheet_status:
    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ª–∏—Å—Ç—ã. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –≤ A1 –Ω–∞ –æ–¥–Ω–æ–º –ª–∏—Å—Ç–µ '–î–∞—Ç–∞', –Ω–∞ –¥—Ä—É–≥–æ–º ‚Äî '–í–æ–¥–∏—Ç–µ–ª—å'.")

bot = TeleBot("8352259423:AAEKCe7Uuz8H87RMe4NotNjsDeTGVR5j1GE")

monitor_started = False

users = {}
sent_tasks = {}
sent_additional_tasks = {}

@bot.message_handler(commands=['start'])
def start(message):
    chat_id = message.chat.id
    users[chat_id] = {}  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞—Ä–∞–Ω–µ–µ
    bot.send_message(chat_id, "üîê –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞:")
    bot.register_next_step_handler(message, verify_invite_code)

def verify_invite_code(message):
    chat_id = message.chat.id
    code = message.text.strip()

    # üîΩ –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –≤–¥—Ä—É–≥ –Ω–µ –≤ —Å–ª–æ–≤–∞—Ä–µ
    if chat_id not in users:
        users[chat_id] = {}

    if code in valid_invite_codes:
        users[chat_id]['authorized'] = True
        bot.send_message(chat_id, f"‚úÖ –ö–æ–¥ –ø—Ä–∏–Ω—è—Ç ({valid_invite_codes[code]}). –í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –∏–º—è:")
        bot.register_next_step_handler(message, register_name)
    else:
        bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")

@bot.message_handler(func=lambda m: True, content_types=['text'])
def fallback_handler(message):
    chat_id = message.chat.id

    # –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –ø—É—Å—Ç—å next_step_handler –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç
    if users.get(chat_id, {}).get('waiting', False):
        return

    if not users.get(chat_id, {}).get('authorized', False):
        return

    if 'current_row' in users[chat_id]:
        show_task_actions(chat_id)
        return

    markup = types.ReplyKeyboardRemove()
    bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è.", reply_markup=markup)

def register_name(message):
    chat_id = message.chat.id

    # ‚õî –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω ‚Äî –≤—ã—Ö–æ–¥
    if not users.get(chat_id, {}).get("authorized", False):
        bot.send_message(chat_id, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è.")
        return

    name = message.text.strip()
    users[chat_id]['name'] = name
    users[chat_id]['waiting'] = True
    names_list = sheet_status.col_values(1)
    if name not in names_list:
        sheet_status.append_row([name])
    sent_tasks[chat_id] = set()
    sent_additional_tasks[chat_id] = set()
    bot.send_message(chat_id, "–û–∂–∏–¥–∞–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è.")

def monitoring_loop():
    while True:
        try:
            for chat_id, data in users.items():
                if 'name' in data:
                    check_and_send_task(chat_id, data['name'])
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:", e)
        time.sleep(3)

def check_and_send_task(chat_id, name):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –≤–æ–¥–∏—Ç–µ–ª—å —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞–Ω–∏–µ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å
    if not users.get(chat_id, {}).get("waiting", True):
        return

    today = datetime.datetime.now().strftime('%Y-%m-%d')
    records = sheet_tasks.get_all_values()
    header = records[0]
    rows = records[1:]

    for idx, row in enumerate(rows, start=2):
        row_dict = dict(zip(header, row))
        if (
            row_dict.get('–î–∞—Ç–∞', '').strip() == today and
            row_dict.get('–í–æ–¥–∏—Ç–µ–ª—å', '').strip() == name and
            row_dict.get('–°—Ç–∞—Ç—É—Å', '').strip() == '' and
            idx not in sent_tasks.get(chat_id, set())
        ):
            sent_tasks.setdefault(chat_id, set()).add(idx)
            users[chat_id]['current_row'] = idx
            users[chat_id]['waiting'] = False
            text = (
                f"–ó–∞–¥–∞—á–∞: {row_dict.get('–ó–∞–¥–∞—á–∞', '')}\n"
                f"–ú–∞—à–∏–Ω–∞: {row_dict.get('–ú–∞—à–∏–Ω–∞', '')}\n"
                f"–í—Ä–µ–º—è –ø–æ –ø–ª–∞–Ω—É: {row_dict.get('–í—Ä–µ–º—è (–ø–æ –ø–ª–∞–Ω—É)', '')}"
            )
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add("‚úÖ –í–∑—è—Ç—å –∑–∞–¥–∞–Ω–∏–µ", "‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤–∑—è—Ç—å –∑–∞–¥–∞–Ω–∏–µ")
            bot.send_message(chat_id, text, reply_markup=markup)
            return

@bot.message_handler(func=lambda m: m.text in ["‚úÖ –í–∑—è—Ç—å –∑–∞–¥–∞–Ω–∏–µ", "‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤–∑—è—Ç—å –∑–∞–¥–∞–Ω–∏–µ"])
def process_task_choice(message):
    chat_id = message.chat.id
    row = users[chat_id]['current_row']

    if message.text == "‚úÖ –í–∑—è—Ç—å –∑–∞–¥–∞–Ω–∏–µ":
        now_time = (datetime.datetime.utcnow() + datetime.timedelta(hours=3)).strftime("%H:%M")
        sheet_tasks.update(f'F{row}:H{row}', [[now_time, '', "–í –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"]])

        msg = bot.send_message(chat_id, "‚è± –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è, –∫–æ—Ç–æ—Ä–æ–µ –í–∞–º –Ω—É–∂–Ω–æ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:")
        users[chat_id]['waiting'] = True
        users[chat_id]['next'] = 'save_eta'
        bot.register_next_step_handler(msg, save_eta)
        return  # ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô return, —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏

    elif message.text == "‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤–∑—è—Ç—å –∑–∞–¥–∞–Ω–∏–µ":
        bot.send_message(chat_id, "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞:")
        bot.register_next_step_handler(message, impossible_reason)

def save_eta(message):
    chat_id = message.chat.id
    row = users[chat_id]['current_row']
    eta = message.text.strip()
    sheet_tasks.update(f'G{row}', [[eta]])
    users[chat_id]['waiting'] = False
    show_task_actions(chat_id)

def impossible_reason(message):
    chat_id = message.chat.id
    row = users[chat_id]['current_row']
    reason = message.text.strip()
    driver_name = users[chat_id]['name']
    timestamp = (datetime.datetime.utcnow() + datetime.timedelta(hours=3)).strftime("%H:%M")
    current_comment = sheet_tasks.cell(row, 9).value or ""
    new_comment = f"{current_comment}\n{driver_name} ({timestamp}): {reason}" if current_comment else f"{driver_name} ({timestamp}): {reason}"
    sheet_tasks.update_cell(row, 9, new_comment)
    sheet_tasks.update(f'B{row}', [[""]])
    bot.send_message(chat_id, "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –ó–∞–¥–∞–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫.")
    sent_tasks[chat_id] = set()
    users[chat_id]['waiting'] = True
    bot.send_message(chat_id, "–û–∂–∏–¥–∞–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è.")

def show_task_actions(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ", "‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å", "üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@bot.message_handler(func=lambda m: m.text in ["‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ", "‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å", "üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"])
def process_task_action(message):
    chat_id = message.chat.id
    row = users[chat_id]['current_row']
    name = users[chat_id]['name']
    if message.text == "‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ":
        now_time = (datetime.datetime.utcnow() + datetime.timedelta(hours=3)).strftime("%H:%M")
        sheet_tasks.update(f'J{row}', [[now_time]])
        sheet_tasks.update(f'H{row}', [["–í—ã–ø–æ–ª–Ω–µ–Ω–æ"]])
    
        markup = types.ReplyKeyboardRemove()
        bot.send_message(chat_id, "–ó–∞–¥–∞–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ.", reply_markup=markup)
        bot.send_message(chat_id, "–û–∂–∏–¥–∞–π—Ç–µ –∑–∞–¥–∞–Ω–∏–µ.", reply_markup=markup)
    
        users[chat_id]['waiting'] = True
        sent_tasks[chat_id] = set()
        time.sleep(1)
        check_and_send_task(chat_id, name)

    elif message.text == "‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å":
        bot.send_message(chat_id, "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É:")
        bot.register_next_step_handler(message, fail_reason)
    elif message.text == "üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π":
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")
        bot.register_next_step_handler(message, add_comment)

def fail_reason(message):
    chat_id = message.chat.id
    row = users[chat_id]['current_row']
    reason = message.text.strip()
    driver_name = users[chat_id]['name']
    timestamp = (datetime.datetime.utcnow() + datetime.timedelta(hours=3)).strftime("%H:%M")

    current_comment = sheet_tasks.cell(row, 9).value or ""
    new_comment = f"{current_comment}\n{driver_name} ({timestamp}): {reason}" if current_comment else f"{driver_name} ({timestamp}): {reason}"

    # 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    sheet_tasks.update_cell(row, 9, new_comment)

    # 2. –û—á–∏—â–∞–µ–º –ø–æ–ª—è B:G + H (–í–æ–¥–∏—Ç–µ–ª—å, –ú–∞—à–∏–Ω–∞, –ó–∞–¥–∞—á–∞, –í—Ä–µ–º—è –ø–æ –ø–ª–∞–Ω—É, –í—Ä–µ–º—è –ø—Ä–∏–Ω—è—Ç–∏—è, –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, –°—Ç–∞—Ç—É—Å)
    sheet_tasks.update(f'B{row}:H{row}', [["", "", "", "", "", "", ""]])

    # 3. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–æ–¥–∏—Ç–µ–ª—è
    bot.send_message(chat_id, "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –ó–∞–¥–∞–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫.")
    sent_tasks[chat_id] = set()
    users[chat_id]['waiting'] = True
    bot.send_message(chat_id, "–û–∂–∏–¥–∞–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è.")

def add_comment(message):
    chat_id = message.chat.id
    row = users[chat_id]['current_row']
    comment = message.text.strip()
    driver_name = users[chat_id]['name']
    timestamp = (datetime.datetime.utcnow() + datetime.timedelta(hours=3)).strftime("%H:%M")
    current_comment = sheet_tasks.cell(row, 9).value or ""
    new_comment = f"{current_comment}\n{driver_name} ({timestamp}): {comment}" if current_comment else f"{driver_name} ({timestamp}): {comment}"
    sheet_tasks.update_cell(row, 9, new_comment)
    bot.send_message(chat_id, "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω.")
    show_task_actions(chat_id)

def monitor_additional():
    while True:
        try:
            for chat_id, data in users.items():
                # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤–æ–¥–∏—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏ –µ—Å—Ç—å –∏–º—è
                if 'name' not in data:
                    continue

                row = data.get('current_row')
                if not row:
                    continue

                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–æ–ø. –∑–∞–¥–∞–Ω–∏—è, –µ—Å–ª–∏ –µ—â—ë –Ω–µ –±—ã–ª–æ
                if chat_id not in sent_additional_tasks:
                    sent_additional_tasks[chat_id] = set()

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–≥–æ –∏–∑ —Ç—Ä—ë—Ö –¥–æ–ø. –∑–∞–¥–∞–Ω–∏–π
                for col_idx, label in [(11, '–î–æ–ø. –∑–∞–¥–∞–Ω–∏–µ 1'), (13, '–î–æ–ø. –∑–∞–¥–∞–Ω–∏–µ 2'), (15, '–î–æ–ø. –∑–∞–¥–∞–Ω–∏–µ 3')]:
                    task_text = sheet_tasks.cell(row, col_idx).value
                    task_status = sheet_tasks.cell(row, col_idx + 1).value or ""
                    task_key = f"{row}_{col_idx}"

                    # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –µ—â—ë –Ω–µ –ø—Ä–∏–Ω—è—Ç–æ –∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å —Ä–∞–Ω–µ–µ
                    if task_text and task_status.strip() == "" and task_key not in sent_additional_tasks[chat_id]:
                        markup = types.InlineKeyboardMarkup()
                        markup.add(
                            types.InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{row}_{col_idx}"),
                            types.InlineKeyboardButton("‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data=f"reject_{row}_{col_idx}")
                        )
                        bot.send_message(chat_id, f"{label}:\n{task_text}", reply_markup=markup)
                        sent_additional_tasks[chat_id].add(task_key)

        except Exception as e:
            print("‚ùå –û—à–∏–±–∫–∞ –≤ monitor_additional:", e)
        time.sleep(10)


@bot.callback_query_handler(func=lambda call: call.data.startswith("accept_") or call.data.startswith("reject_"))
def handle_additional_task(call):
    chat_id = call.message.chat.id
    driver = users[chat_id]['name']
    parts = call.data.split('_')
    action, row, col = parts[0], int(parts[1]), int(parts[2])
    timestamp = (datetime.datetime.utcnow() + datetime.timedelta(hours=3)).strftime("%H:%M")

    if action == "accept":
        sheet_tasks.update_cell(row, col + 1, f"{driver} –ø—Ä–∏–Ω—è–ª –∑–∞–¥–∞–Ω–∏–µ –≤ {timestamp}")
        bot.answer_callback_query(call.id, text="–ó–∞–¥–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ")
        bot.edit_message_reply_markup(chat_id=chat_id, message_id=call.message.message_id, reply_markup=None)

    elif action == "reject":
        users[chat_id]['reject_context'] = {'row': row, 'col': col, 'driver': driver}
        bot.send_message(chat_id, "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞:")
        bot.register_next_step_handler(call.message, process_reject_comment)
        bot.answer_callback_query(call.id)
        bot.edit_message_reply_markup(chat_id=chat_id, message_id=call.message.message_id, reply_markup=None)

def process_reject_comment(message):
    chat_id = message.chat.id
    context = users[chat_id].get('reject_context')
    if not context:
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–∞–∑–∞.")
        return
    row = context['row']
    col = context['col']
    driver = context['driver']
    timestamp = (datetime.datetime.utcnow() + datetime.timedelta(hours=3)).strftime("%H:%M")
    reason = message.text.strip()
    value = f"{driver} ({timestamp}): {reason}"
    sheet_tasks.update_cell(row, col + 1, value)
    bot.send_message(chat_id, "–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
    del users[chat_id]['reject_context']
    show_task_actions(chat_id)

def reject_reason(message, row, col, driver):
    reason = message.text.strip()
    timestamp = (datetime.datetime.utcnow() + datetime.timedelta(hours=3)).strftime("%H:%M")
    sheet_tasks.update_cell(row, col + 1, f"{driver} ({timestamp}): {reason}")
    bot.send_message(message.chat.id, "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")

from flask import Flask, request

app = Flask(__name__)

@app.route('/', methods=['POST'])
def webhook():
    global monitor_started
    json_str = request.get_data().decode('UTF-8')
    update = types.Update.de_json(json_str)
    bot.process_new_updates([update])

    if not monitor_started:
        print("üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –ø–æ—Ç–æ–∫–æ–≤")
        threading.Thread(target=monitoring_loop, daemon=True).start()
        threading.Thread(target=monitor_additional, daemon=True).start()
        monitor_started = True

    return '!', 200

@app.route('/', methods=['GET'])
def index():
    return "Bot is running!", 200

if __name__ == '__main__':
    bot.remove_webhook()
    time.sleep(1)
    bot.set_webhook(url='https://logistics-bot-nnxy.onrender.com')
    app.run(host="0.0.0.0", port=10000)